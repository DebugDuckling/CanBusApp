# ArcneDriver.cs
﻿using System;
using System.Runtime.InteropServices;

namespace ArcnetDriver
{
    // Define the COM20020_CONFIG structure
    [StructLayout(LayoutKind.Sequential, Pack = 1)]
    public struct COM20020_CONFIG
    {
        public ushort uiCom20020BaseIOAddress;
        public byte byCom20020InterruptLevel;
        public byte byCom20020Timeout;
        public byte byCom20020NodeID;
        public byte bCom20020_128NAKs;
        public byte bCom20020ReceiveAll;
        public byte byCom20020ClockPrescaler;
        public byte bCom20020SlowArbitration;
        public byte bCom20020ReceiveBroadcasts;
    }

    // Define the COM20020_TRANSMIT_BUFFER structure
    [StructLayout(LayoutKind.Sequential, Pack = 1)]
    public struct COM20020_TRANSMIT_BUFFER
    {
        public byte byDestinationNodeID;
        public ushort uiNumberOfBytes;
        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 508)]
        public byte[] byDataBuffer;
    }

    // Define the COM20020_RECEIVE_BUFFER structure
    [StructLayout(LayoutKind.Sequential, Pack = 1)]
    public struct COM20020_RECEIVE_BUFFER
    {
        public byte bySourceNodeID;
        public byte byDestinationNodeID;
        public ushort uiNumberOfBytes;
        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 508)]
        public byte[] byDataBuffer;
        public uint dwNumberOfFilledBuffers;
    }

    // Define the COM20020_STATUS structure
    [StructLayout(LayoutKind.Sequential, Pack = 1)]
    public struct COM20020_STATUS
    {
        public byte bReceiveActivity;
        public byte bPowerOnReset;
        public byte bRecon;
        public byte bToken;
        public uint dwReceivedMessages;
        public byte bTransmissionComplete;
        public byte bTransmissionAcknowledged;
        public byte bExcessiveNAKs;
        public uint dwReserved;
    }

    // Define the COM20020_REGISTER structure
    [StructLayout(LayoutKind.Sequential, Pack = 1)]
    public struct COM20020_REGISTER
    {
        public byte bWrite;
        public byte byRegister;
        public byte byValue;
    }

    public static class ArcX
    {
        private const string DLL_NAME = "ArcX.dll";

        [DllImport(DLL_NAME, CallingConvention = CallingConvention.Cdecl)]
        public static extern int Com20020Init(ref COM20020_CONFIG cfg, byte deviceNumber, byte hardwareType);

        [DllImport(DLL_NAME, CallingConvention = CallingConvention.Cdecl)]
        public static extern int Com20020Register(ref COM20020_REGISTER reg);

        [DllImport(DLL_NAME, CallingConvention = CallingConvention.Cdecl)]
        public static extern int Com20020Status(ref COM20020_STATUS status);

        [DllImport(DLL_NAME, CallingConvention = CallingConvention.Cdecl)]
        public static extern int Com20020CancelTX();

        [DllImport(DLL_NAME, CallingConvention = CallingConvention.Cdecl)]
        public static extern int Com20020FlushRX();

        [DllImport(DLL_NAME, CallingConvention = CallingConvention.Cdecl)]
        public static extern int Com20020Transmit(ref COM20020_TRANSMIT_BUFFER txbuf);

        [DllImport(DLL_NAME, CallingConvention = CallingConvention.Cdecl)]
        public static extern int Com20020Receive(ref COM20020_RECEIVE_BUFFER rxbuf);

        [DllImport(DLL_NAME, CallingConvention = CallingConvention.Cdecl)]
        public static extern int Com20020WakeOnReceive(IntPtr receiveEvent);

        [DllImport(DLL_NAME, CallingConvention = CallingConvention.Cdecl)]
        public static extern int Com20020ResetWakeOnReceive();

        [DllImport(DLL_NAME, CallingConvention = CallingConvention.Cdecl)]
        public static extern int Com20020WakeOnTXComplete(IntPtr transmitEvent);

        [DllImport(DLL_NAME, CallingConvention = CallingConvention.Cdecl)]
        public static extern int Com20020ResetWakeOnTXComplete();

        [DllImport(DLL_NAME, CallingConvention = CallingConvention.Cdecl)]
        public static extern int Com20020WakeOnRecon(IntPtr reconEvent);

        [DllImport(DLL_NAME, CallingConvention = CallingConvention.Cdecl)]
        public static extern int Com20020ResetWakeOnRecon();

        [DllImport(DLL_NAME, CallingConvention = CallingConvention.Cdecl)]
        public static extern int Com20020GetOverflowTotal(ref long packets, ref long data);

        [DllImport(DLL_NAME, CallingConvention = CallingConvention.Cdecl)]
        public static extern int Com20020GetFirmwareRevision(ref short rev);

        [DllImport(DLL_NAME, CallingConvention = CallingConvention.Cdecl)]
        public static extern int Com20020UsbVersion(ref short version);

        [DllImport(DLL_NAME, CallingConvention = CallingConvention.Cdecl)]
        public static extern int Com20020Exit();
    }
}


# ArcnetIf.cs
﻿using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Threading;

namespace ArcnetDriver
{
    public enum WINMSG
    {
        WINMSG_RECON = 0x0400 + 1,
        WINMSG_RX
    };

    public enum TxState_E
    {
        TxState_ERR = 0,   // Transmission error
        TxState_TMA = 1,   // The message was properly received.
        TxState_NAK = 2,   // Message was killed because of excessive NAKs.
        TxState_NA = 3,    // ?
        TxState_TA = 4     // The message was sent, but not acknowledged.
    };

    public class ArcnetIf
    {
        // General
        private const int LAN_EVENT_TIMEOUT = 100; // Time to wait for events (ms).

        // LAN definitions
        private const int LAN_SPEED = 4;           // Example speed value
        private const int LAN_TIMEOUT = 24;        // Example timeout value
        private const int LAN_DEVICE = 0;          // Device 1
        private const int LAN_HWTYPE = 0;          // USB22
        private const byte LAN_128NAKS = 1;
        private const byte LAN_RXALL = 0;

        // Static variables
        private static bool bRunning = false;              // Indicates if threads are running.
        private static uint dwRecon = 0;                   // Number of recons.
        private static EventWaitHandle hTxEvent = new AutoResetEvent(false); // TX event handle.
        private static EventWaitHandle hRxEvent = new AutoResetEvent(false); // RX event handle.
        private static EventWaitHandle hReconEvent = new AutoResetEvent(false); // Recon event handle.
        private static SemaphoreSlim RxListSema = new SemaphoreSlim(1, 1); // Semaphore to protect the RxList.
        private static Queue<COM20020_RECEIVE_BUFFER> RxMsgList = new Queue<COM20020_RECEIVE_BUFFER>(); // RX messages

        // Static procedures
        private static void ReconThread()
        {
            while (bRunning)
            {
                if (hReconEvent.WaitOne(LAN_EVENT_TIMEOUT))
                {
                    dwRecon++;
                    // Signal event to the UI thread. (Implement this part according to your UI framework)
                }
            }
        }

        private static void ReceiveThread()
        {
            while (bRunning)
            {
                COM20020_RECEIVE_BUFFER crb = new COM20020_RECEIVE_BUFFER(); // Ensure crb is initialized
                if (hRxEvent.WaitOne(LAN_EVENT_TIMEOUT))
                {
                    while (ArcX.Com20020Receive(ref crb) == 0)
                    {
                        RxListSema.Wait();
                        RxMsgList.Enqueue(crb);
                        RxListSema.Release();
                    }
                    // Signal event to the UI thread. (Implement this part according to your UI framework)
                }
            }
        }

        // Constructor
        public ArcnetIf()
        {
      
        }

        // Destructor
        ~ArcnetIf()
        {
            Close();
        }

        // Opens the ARCNET port.
        public bool Open(byte nNodeId, byte bBroadcast)
        {
            bool bResult = false;
            COM20020_CONFIG cfg = new COM20020_CONFIG
            {
                uiCom20020BaseIOAddress = 0,
                byCom20020InterruptLevel = 0,
                byCom20020Timeout = LAN_TIMEOUT,
                byCom20020NodeID = nNodeId,
                bCom20020_128NAKs = LAN_128NAKS,
                bCom20020ReceiveAll = LAN_RXALL,
                byCom20020ClockPrescaler = LAN_SPEED,
                bCom20020SlowArbitration = 0,
                bCom20020ReceiveBroadcasts = bBroadcast
            };

            if (ArcX.Com20020Init(ref cfg, LAN_DEVICE, LAN_HWTYPE) != 0)
            {
                Console.WriteLine("COM20020 was not properly initialized");
            }
            else
            {
                InitDeviceEvents();
                bResult = true;
            }

            return bResult;
        }

        // Closes the ARCNET port.
        public void Close()
        {
            bRunning = false;
            ArcX.Com20020ResetWakeOnReceive();
            ArcX.Com20020ResetWakeOnTXComplete();
            ArcX.Com20020ResetWakeOnRecon();
            ArcX.Com20020CancelTX();
            ArcX.Com20020FlushRX();
            ArcX.Com20020Exit();
            dwRecon = 0;
        }

        // Reports the recon state.
        public bool GetReconState()
        {
            COM20020_STATUS cs = new COM20020_STATUS();
            ArcX.Com20020Status(ref cs);
            return cs.bRecon > 0;
        }

        // Reports the recon counter.
        public uint GetReconCount()
        {
            return dwRecon;
        }

        // Transmits a message.
        public TxState_E TransmitMessage(byte nDestID, byte[] pBuffer, int nLength)
        {
            if (nLength > 508)
                return TxState_E.TxState_ERR;

            bool bTransmissionAcked = false;
            COM20020_TRANSMIT_BUFFER ctb = new COM20020_TRANSMIT_BUFFER
            {
                byDestinationNodeID = nDestID,
                uiNumberOfBytes = (ushort)nLength,
                byDataBuffer = new byte[508]
            };
            Array.Copy(pBuffer, ctb.byDataBuffer, nLength);

            while (!bTransmissionAcked)
            {
                bool bReturn = true;
                while (bReturn)
                {
                    bReturn = ArcX.Com20020Transmit(ref ctb) == 0;
                    hTxEvent.WaitOne(LAN_EVENT_TIMEOUT);
                    COM20020_STATUS cs = new COM20020_STATUS();
                    ArcX.Com20020Status(ref cs);
                    if ((cs.bTransmissionComplete > 0) && (cs.bTransmissionAcknowledged > 0))
                    {
                        return TxState_E.TxState_TMA; // The message was properly received
                    }
                    if ((cs.bTransmissionComplete > 0) && !(cs.bTransmissionAcknowledged > 0))
                    {
                        return TxState_E.TxState_TA; // The message was sent, but not acknowledged.
                    }
                    if (cs.bExcessiveNAKs > 0) // Message was killed because of excessive NAKs
                    {
                        return TxState_E.TxState_NAK;
                    }
                    if (cs.bRecon > 0) // Recon active
                    {
                        return TxState_E.TxState_ERR;
                    }
                }
            }
            return TxState_E.TxState_NAK;
        }

        // Gets the next message in the RX list.
        public bool GetRxMessage(out COM20020_RECEIVE_BUFFER pMsg)
        {
            pMsg = new COM20020_RECEIVE_BUFFER();
            bool bResult = false;
            RxListSema.Wait();
            if (RxMsgList.Count > 0)
            {
                pMsg = RxMsgList.Dequeue();
                bResult = true;
            }
            RxListSema.Release();
            return bResult;
        }

        // Initializes the device events.
        private void InitDeviceEvents()
        {
            hRxEvent = new AutoResetEvent(false);
            ArcX.Com20020WakeOnReceive(hRxEvent.SafeWaitHandle.DangerousGetHandle());
            hTxEvent = new AutoResetEvent(false);
            ArcX.Com20020WakeOnTXComplete(hTxEvent.SafeWaitHandle.DangerousGetHandle());
            bRunning = true;
            Thread reconThread = new Thread(ReconThread);
            reconThread.Start();
            Thread receiveThread = new Thread(ReceiveThread);
            receiveThread.Start();
        }
    }
}


# CanBusController.cs
﻿using System;
using System.Windows.Forms;

namespace CanBusApp
{
    public class CanBusController
    {
        private readonly CanBusModel model;
        private readonly Form1 view;

        public CanBusController(CanBusModel model, Form1 view)
        {
            this.model = model;
            this.view = view;

            view.ConnectButton.Click += ConnectButton_Click;
        }

        private void ConnectButton_Click(object sender, EventArgs e)
        {
            model.NodeId = view.NodeId;
            model.Continuously = view.TxContinuous;
            model.AutoUpdate = view.AutoUpdate;
            model.Commands = view.GetCommands();
            model.Statuses = view.GetStatuses();

            MessageBox.Show("Data collected and stored in buffer.");
        }
    }

}


# CanBusModel.cs
﻿public class CanBusModel
{
    public string NodeId { get; set; }
    public bool Continuously { get; set; }
    public bool AutoUpdate { get; set; }
    public List<ControlItem> Commands { get; set; } = new List<ControlItem>();
    public List<ControlItem> Statuses { get; set; } = new List<ControlItem>();
    public string Recons { get; set; } // Added Recons property
    public string TxState { get; set; } // Added TxState property
    public string TxFrames { get; set; } // Added TxFrames property
    public string RxFrames { get; set; } // Added RxFrames property
}

public class ControlItem
{
    public string Label { get; set; }
    public string Type { get; set; } // combobox, textbox, checkbox, button
    public List<string> Options { get; set; }
    public string DefaultValue { get; set; }
    public bool DefaultChecked { get; set; }
    public string ButtonText { get; set; }
}


# commands_config.json
﻿{
  "commands": [
    {
      "label": "Command 1",
      "type": "combobox",
      "options": [ "enum 1", "enum 2", "enum 3", "enum 4" ],
      "defaultValue": "enum 2"
    },
    {
      "label": "Command 2",
      "type": "textbox",
      "defaultValue": "Some text"
    },
    {
      "label": "Command 3",
      "type": "checkbox",
      "defaultValue": true
    },
    {
      "label": "Command 4",
      "type": "button",
      "buttonText": "Click me"
    }
  ],
  "status": [
    {
      "label": "Status 1",
      "type": "textbox",
      "defaultValue": "Initial Status 1"
    },
    {
      "label": "Status 2",
      "type": "combobox",
      "options": [ "option 1", "option 2" ],
      "defaultValue": "option 1"
    },
    {
      "label": "Status 3",
      "type": "checkbox",
      "defaultValue": false
    }
  ]
}


# ConfigLoader.cs
﻿using System.Collections.Generic;
using System.IO;
using Newtonsoft.Json;

public static CanBusModel LoadConfiguration(string path)
{
var json = File.ReadAllText(path);
var config = JsonConvert.DeserializeObject<ConfigModel>(json);
return new CanBusModel
{
Commands = config.Commands,
Statuses = config.Statuses
};
}

public class ConfigModel
{
    public List<ControlItem> Commands { get; set; }
    public List<ControlItem> Statuses { get; set; }
}


# Form1.cs
﻿using System;
using System.Collections.Generic;
using System.Drawing;
using System.Windows.Forms;
using ArcnetDriver;

namespace CanBusApp
{
    public partial class Form1 : Form
    {
        private CanBusModel model;
        private Dictionary<string, Control> commandControls = new Dictionary<string, Control>();
        private Dictionary<string, Control> statusControls = new Dictionary<string, Control>();
        private ArcnetIf arcnetInterface;

        public Form1()
        {
            InitializeComponent();
            model = ConfigLoader.LoadConfiguration("commands_config.json");
            InitializeDynamicComponents();
            arcnetInterface = new ArcnetIf();
        }

        private void InitializeDynamicComponents()
        {
            int yPosition = 30;

            // Commands section
            foreach (var command in model.Commands)
            {
                var label = new Label
                {
                    Text = command.Label,
                    Location = new Point(20, yPosition)
                };
                commandsGroup.Controls.Add(label);

                Control control = null;
                switch (command.Type)
                {
                    case "combobox":
                        var comboBox = new ComboBox
                        {
                            DataSource = command.Options,
                            Location = new Point(150, yPosition),
                            Width = 100,
                            DropDownStyle = ComboBoxStyle.DropDownList // Ensure dropdown style
                        };
                        comboBox.SelectedItem = command.DefaultValue;
                        control = comboBox;
                        break;
                    case "textbox":
                        var textBox = new TextBox
                        {
                            Location = new Point(150, yPosition),
                            Width = 100,
                            Text = command.DefaultValue // Set default value
                        };
                        control = textBox;
                        break;
                    case "checkbox":
                        var checkBox = new CheckBox
                        {
                            Location = new Point(150, yPosition),
                            Checked = command.DefaultChecked
                        };
                        control = checkBox;
                        break;
                    case "button":
                        var button = new Button
                        {
                            Location = new Point(150, yPosition),
                            Text = command.ButtonText
                        };
                        button.Click += (s, e) => MessageBox.Show($"{command.Label} button clicked");
                        control = button;
                        break;
                }

                if (control != null)
                {
                    commandsGroup.Controls.Add(control);
                    commandControls[command.Label] = control;
                }

                yPosition += 30;
            }

            // Status section
            yPosition = 30;
            foreach (var status in model.Statuses)
            {
                var label = new Label
                {
                    Text = status.Label,
                    Location = new Point(20, yPosition)
                };
                statusGroup.Controls.Add(label);

                Control control = null;
                switch (status.Type)
                {
                    case "combobox":
                        var comboBox = new ComboBox
                        {
                            DataSource = status.Options,
                            Location = new Point(150, yPosition),
                            Width = 100,
                            DropDownStyle = ComboBoxStyle.DropDownList // Ensure dropdown style
                        };
                        comboBox.SelectedItem = status.DefaultValue;
                        control = comboBox;
                        break;
                    case "textbox":
                        var textBox = new TextBox
                        {
                            Location = new Point(150, yPosition),
                            Width = 100,
                            Text = status.DefaultValue // Set default value
                        };
                        control = textBox;
                        break;
                    case "checkbox":
                        var checkBox = new CheckBox
                        {
                            Location = new Point(150, yPosition),
                            Checked = status.DefaultChecked
                        };
                        control = checkBox;
                        break;
                }

                if (control != null)
                {
                    statusGroup.Controls.Add(control);
                    statusControls[status.Label] = control;
                }

                yPosition += 30;
            }
        }

        private void connectButton_Click(object sender, EventArgs e)
        {
            byte nodeId = byte.Parse(txtNodeId.Text);
            byte broadcast = 1; // Example value

            bool success = arcnetInterface.Open(nodeId, broadcast);

            if (success)
            {
                MessageBox.Show("Initialization successful.", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            else
            {
                MessageBox.Show("Initialization failed.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void closeButton_Click(object sender, EventArgs e)
        {
            arcnetInterface.Close();
        }

        public string NodeId => txtNodeId.Text;
        public string Recons => txtRecons.Text;
        public string TxState => txtTxState.Text;
        public int TxFrames => int.Parse(txtTxFrames.Text);
        public int RxFrames => int.Parse(txtRxFrames.Text);
        public bool TxContinuous => chkTxContinuous.Checked;
        public bool AutoUpdate => chkAutoUpdate.Checked;
        public int SendCount => int.Parse(txtSendCount.Text);
        public int ReceiveCount => int.Parse(txtReceiveCount.Text);

        public List<ControlItem> GetCommands()
        {
            var commands = new List<ControlItem>();
            foreach (var kvp in commandControls)
            {
                var controlItem = new ControlItem
                {
                    Label = kvp.Key,
                    Type = kvp.Value.GetType().Name.ToLower()
                };

                switch (controlItem.Type)
                {
                    case "combobox":
                        controlItem.DefaultValue = (kvp.Value as ComboBox).SelectedItem?.ToString();
                        break;
                    case "textbox":
                        controlItem.DefaultValue = (kvp.Value as TextBox).Text;
                        break;
                    case "checkbox":
                        controlItem.DefaultChecked = (kvp.Value as CheckBox).Checked;
                        break;
                }

                commands.Add(controlItem);
            }
            return commands;
        }

        public List<ControlItem> GetStatuses()
        {
            var statuses = new List<ControlItem>();
            foreach (var kvp in statusControls)
            {
                var controlItem = new ControlItem
                {
                    Label = kvp.Key,
                    Type = kvp.Value.GetType().Name.ToLower()
                };

                switch (controlItem.Type)
                {
                    case "combobox":
                        controlItem.DefaultValue = (kvp.Value as ComboBox).SelectedItem?.ToString();
                        break;
                    case "textbox":
                        controlItem.DefaultValue = (kvp.Value as TextBox).Text;
                        break;
                    case "checkbox":
                        controlItem.DefaultChecked = (kvp.Value as CheckBox).Checked;
                        break;
                }

                statuses.Add(controlItem);
            }
            return statuses;
        }

        public Button ConnectButton => this.connectButton;
    }
}


# Form1.Designer.cs
﻿using System;

namespace CanBusApp
{
    partial class Form1
    {
        private System.ComponentModel.IContainer components = null;
        private Button connectButton;
        private Button closeButton;
        private Button updateButton;
        private TextBox txtNodeId;
        private TextBox txtRecons;
        private TextBox txtTxState;
        private TextBox txtTxFrames;
        private TextBox txtRxFrames;
        private CheckBox chkTxContinuous;
        private CheckBox chkAutoUpdate;
        private Label lblTitle;
        private TableLayoutPanel mainLayout;
        private GroupBox arcnetGroup;
        private GroupBox commandsGroup;
        private GroupBox statusGroup;
        private GroupBox optionsGroup;
        private Label lblNodeId;
        private Label lblRecons;
        private Label lblTxState;
        private Label lblTxFrames;
        private Label lblRxFrames;

        private void InitializeComponent()
        {
            this.components = new System.ComponentModel.Container();
            this.connectButton = new System.Windows.Forms.Button();
            this.closeButton = new System.Windows.Forms.Button();
            this.updateButton = new System.Windows.Forms.Button();
            this.txtNodeId = new System.Windows.Forms.TextBox();
            this.txtRecons = new System.Windows.Forms.TextBox();
            this.txtTxState = new System.Windows.Forms.TextBox();
            this.txtTxFrames = new System.Windows.Forms.TextBox();
            this.txtRxFrames = new System.Windows.Forms.TextBox();
            this.chkTxContinuous = new System.Windows.Forms.CheckBox();
            this.chkAutoUpdate = new System.Windows.Forms.CheckBox();
            this.lblTitle = new System.Windows.Forms.Label();
            this.mainLayout = new System.Windows.Forms.TableLayoutPanel();
            this.arcnetGroup = new System.Windows.Forms.GroupBox();
            this.commandsGroup = new System.Windows.Forms.GroupBox();
            this.statusGroup = new System.Windows.Forms.GroupBox();
            this.optionsGroup = new System.Windows.Forms.GroupBox();
            this.lblNodeId = new System.Windows.Forms.Label();
            this.lblRecons = new System.Windows.Forms.Label();
            this.lblTxState = new System.Windows.Forms.Label();
            this.lblTxFrames = new System.Windows.Forms.Label();
            this.lblRxFrames = new System.Windows.Forms.Label();

            this.SuspendLayout();

            // lblTitle
            this.lblTitle.Font = new System.Drawing.Font("Segoe UI", 14F, System.Drawing.FontStyle.Bold);
            this.lblTitle.Dock = System.Windows.Forms.DockStyle.Fill;
            this.lblTitle.Text = "ARCNET Simulator";
            this.lblTitle.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;

            // mainLayout
            this.mainLayout.ColumnCount = 6;
            this.mainLayout.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 15F));
            this.mainLayout.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 15F));
            this.mainLayout.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 15F));
            this.mainLayout.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 15F));
            this.mainLayout.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 20F));
            this.mainLayout.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 20F));
            this.mainLayout.Controls.Add(this.lblTitle, 0, 0);
            this.mainLayout.SetColumnSpan(this.lblTitle, 6);
            this.mainLayout.Controls.Add(this.arcnetGroup, 0, 1);
            this.mainLayout.SetColumnSpan(this.arcnetGroup, 3);
            this.mainLayout.Controls.Add(this.optionsGroup, 3, 1);
            this.mainLayout.SetColumnSpan(this.optionsGroup, 3);
            this.mainLayout.Controls.Add(this.commandsGroup, 0, 2);
            this.mainLayout.Controls.Add(this.statusGroup, 3, 2);
            this.mainLayout.SetColumnSpan(this.commandsGroup, 3);
            this.mainLayout.SetColumnSpan(this.statusGroup, 3);
            this.mainLayout.Dock = System.Windows.Forms.DockStyle.Fill;
            this.mainLayout.Location = new System.Drawing.Point(0, 0);
            this.mainLayout.Name = "mainLayout";
            this.mainLayout.RowCount = 3;
            this.mainLayout.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 40F));
            this.mainLayout.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 150F));
            this.mainLayout.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.mainLayout.Size = new System.Drawing.Size(800, 450);

            // arcnetGroup
            this.arcnetGroup.Controls.Add(this.lblNodeId);
            this.arcnetGroup.Controls.Add(this.txtNodeId);
            this.arcnetGroup.Controls.Add(this.lblRecons);
            this.arcnetGroup.Controls.Add(this.txtRecons);
            this.arcnetGroup.Controls.Add(this.lblTxState);
            this.arcnetGroup.Controls.Add(this.txtTxState);
            this.arcnetGroup.Controls.Add(this.lblTxFrames);
            this.arcnetGroup.Controls.Add(this.txtTxFrames);
            this.arcnetGroup.Controls.Add(this.lblRxFrames);
            this.arcnetGroup.Controls.Add(this.txtRxFrames);
            this.arcnetGroup.Controls.Add(this.connectButton);
            this.arcnetGroup.Controls.Add(this.closeButton);
            this.arcnetGroup.Dock = System.Windows.Forms.DockStyle.Fill;
            this.arcnetGroup.Location = new System.Drawing.Point(3, 43);
            this.arcnetGroup.Name = "arcnetGroup";
            this.arcnetGroup.Size = new System.Drawing.Size(394, 144); // Adjusted size to fit next to optionsGroup
            this.arcnetGroup.TabIndex = 0;
            this.arcnetGroup.TabStop = false;
            this.arcnetGroup.Text = "ARCNET";

            // lblNodeId
            this.lblNodeId.Location = new System.Drawing.Point(10, 20);
            this.lblNodeId.Name = "lblNodeId";
            this.lblNodeId.Size = new System.Drawing.Size(100, 20);
            this.lblNodeId.Text = "Node Id";

            // txtNodeId
            this.txtNodeId.Location = new System.Drawing.Point(10, 40);
            this.txtNodeId.Name = "txtNodeId";
            this.txtNodeId.Size = new System.Drawing.Size(100, 20);
            this.txtNodeId.TabIndex = 1;

            // lblRecons
            this.lblRecons.Location = new System.Drawing.Point(120, 20);
            this.lblRecons.Name = "lblRecons";
            this.lblRecons.Size = new System.Drawing.Size(100, 20);
            this.lblRecons.Text = "Recons";

            // txtRecons
            this.txtRecons.Location = new System.Drawing.Point(120, 40);
            this.txtRecons.Name = "txtRecons";
            this.txtRecons.Size = new System.Drawing.Size(100, 20);
            this.txtRecons.TabIndex = 2;

            // lblTxState
            this.lblTxState.Location = new System.Drawing.Point(230, 20);
            this.lblTxState.Name = "lblTxState";
            this.lblTxState.Size = new System.Drawing.Size(100, 20);
            this.lblTxState.Text = "TX State";

            // txtTxState
            this.txtTxState.Location = new System.Drawing.Point(230, 40);
            this.txtTxState.Name = "txtTxState";
            this.txtTxState.Size = new System.Drawing.Size(100, 20);
            this.txtTxState.TabIndex = 3;

            // lblTxFrames
            this.lblTxFrames.Location = new System.Drawing.Point(340, 20);
            this.lblTxFrames.Name = "lblTxFrames";
            this.lblTxFrames.Size = new System.Drawing.Size(100, 20);
            this.lblTxFrames.Text = "TX Frames";

            // txtTxFrames
            this.txtTxFrames.Location = new System.Drawing.Point(340, 40);
            this.txtTxFrames.Name = "txtTxFrames";
            this.txtTxFrames.Size = new System.Drawing.Size(100, 20);
            this.txtTxFrames.TabIndex = 4;

            // lblRxFrames
            this.lblRxFrames.Location = new System.Drawing.Point(450, 20);
            this.lblRxFrames.Name = "lblRxFrames";
            this.lblRxFrames.Size = new System.Drawing.Size(100, 20);
            this.lblRxFrames.Text = "RX Frames";

            // txtRxFrames
            this.txtRxFrames.Location = new System.Drawing.Point(450, 40);
            this.txtRxFrames.Name = "txtRxFrames";
            this.txtRxFrames.Size = new System.Drawing.Size(100, 20);
            this.txtRxFrames.TabIndex = 5;

            // connectButton
            this.connectButton.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
            this.connectButton.Location = new System.Drawing.Point(10, 70);
            this.connectButton.Name = "connectButton";
            this.connectButton.Size = new System.Drawing.Size(75, 23);
            this.connectButton.TabIndex = 6;
            this.connectButton.Text = "Connect";
            this.connectButton.UseVisualStyleBackColor = true;

            // closeButton
            this.closeButton.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
            this.closeButton.Location = new System.Drawing.Point(90, 70);
            this.closeButton.Name = "closeButton";
            this.closeButton.Size = new System.Drawing.Size(75, 23);
            this.closeButton.TabIndex = 7;
            this.closeButton.Text = "Close";
            this.closeButton.UseVisualStyleBackColor = true;

            // optionsGroup
            this.optionsGroup.Controls.Add(this.chkTxContinuous);
            this.optionsGroup.Controls.Add(this.chkAutoUpdate);
            this.optionsGroup.Controls.Add(this.updateButton);
            this.optionsGroup.Dock = System.Windows.Forms.DockStyle.Fill;
            this.optionsGroup.Location = new System.Drawing.Point(403, 43);
            this.optionsGroup.Name = "optionsGroup";
            this.optionsGroup.Size = new System.Drawing.Size(394, 144); // Adjusted size to fit next to arcnetGroup
            this.optionsGroup.TabIndex = 1;
            this.optionsGroup.TabStop = false;
            this.optionsGroup.Text = "Options";

            // chkTxContinuous
            this.chkTxContinuous.Location = new System.Drawing.Point(10, 20);
            this.chkTxContinuous.Name = "chkTxContinuous";
            this.chkTxContinuous.Size = new System.Drawing.Size(100, 20);
            this.chkTxContinuous.TabIndex = 0;
            this.chkTxContinuous.Text = "TX Continuous";
            this.chkTxContinuous.UseVisualStyleBackColor = true;

            // chkAutoUpdate
            this.chkAutoUpdate.Location = new System.Drawing.Point(10, 50);
            this.chkAutoUpdate.Name = "chkAutoUpdate";
            this.chkAutoUpdate.Size = new System.Drawing.Size(100, 20);
            this.chkAutoUpdate.TabIndex = 1;
            this.chkAutoUpdate.Text = "Auto Update";
            this.chkAutoUpdate.UseVisualStyleBackColor = true;

            // updateButton
            this.updateButton.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
            this.updateButton.Location = new System.Drawing.Point(10, 80);
            this.updateButton.Name = "updateButton";
            this.updateButton.Size = new System.Drawing.Size(75, 23);
            this.updateButton.TabIndex = 2;
            this.updateButton.Text = "Update";
            this.updateButton.UseVisualStyleBackColor = true;

            // commandsGroup
            this.commandsGroup.Dock = System.Windows.Forms.DockStyle.Fill;
            this.commandsGroup.Location = new System.Drawing.Point(3, 193);
            this.commandsGroup.Name = "commandsGroup";
            this.commandsGroup.Size = new System.Drawing.Size(394, 254);
            this.commandsGroup.TabIndex = 2;
            this.commandsGroup.TabStop = false;
            this.commandsGroup.Text = "Commands";

            // statusGroup
            this.statusGroup.Dock = System.Windows.Forms.DockStyle.Fill;
            this.statusGroup.Location = new System.Drawing.Point(403, 193);
            this.statusGroup.Name = "statusGroup";
            this.statusGroup.Size = new System.Drawing.Size(394, 254);
            this.statusGroup.TabIndex = 3;
            this.statusGroup.TabStop = false;
            this.statusGroup.Text = "Status";

            // Form1
            this.ClientSize = new System.Drawing.Size(800, 450);
            this.Controls.Add(this.mainLayout);
            this.Name = "Form1";
            this.Text = "CAN Bus Communication";
            this.ResumeLayout(false);
            this.PerformLayout();
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }
    }
}

# Program.cs
namespace CanBusApp
{
    static class Program
    {
        [STAThread]
        static void Main()
        {
            ApplicationConfiguration.Initialize();

            var model = new CanBusModel();
            var view = new Form1();
            var controller = new CanBusController(model, view);

            Application.Run(view);
        }
    }
}


# CanBusApp.deps.json
{
  "runtimeTarget": {
    "name": ".NETCoreApp,Version=v8.0",
    "signature": ""
  },
  "compilationOptions": {},
  "targets": {
    ".NETCoreApp,Version=v8.0": {
      "CanBusApp/1.0.0": {
        "dependencies": {
          "Newtonsoft.Json": "13.0.3"
        },
        "runtime": {
          "CanBusApp.dll": {}
        }
      },
      "Newtonsoft.Json/13.0.3": {
        "runtime": {
          "lib/net6.0/Newtonsoft.Json.dll": {
            "assemblyVersion": "13.0.0.0",
            "fileVersion": "13.0.3.27908"
          }
        }
      }
    }
  },
  "libraries": {
    "CanBusApp/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    },
    "Newtonsoft.Json/13.0.3": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-HrC5BXdl00IP9zeV+0Z848QWPAoCr9P3bDEZguI+gkLcBKAOxix/tLEAAHC+UvDNPv4a2d18lOReHMOagPa+zQ==",
      "path": "newtonsoft.json/13.0.3",
      "hashPath": "newtonsoft.json.13.0.3.nupkg.sha512"
    }
  }
}

# CanBusApp.runtimeconfig.json
{
  "runtimeOptions": {
    "tfm": "net8.0",
    "frameworks": [
      {
        "name": "Microsoft.NETCore.App",
        "version": "8.0.0"
      },
      {
        "name": "Microsoft.WindowsDesktop.App",
        "version": "8.0.0"
      }
    ],
    "configProperties": {
      "System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization": true
    }
  }
}

# commands_config.json
﻿{
  "commands": [
    {
      "label": "Command 1",
      "options": [ "enum 1", "enum 2", "enum 3", "enum 4" ],
      "defaultValue": "enum 2"
    },
    {
      "label": "Command 2",
      "options": [ "enum 1", "enum 2", "enum 3", "enum 4" ],
      "defaultValue": "enum 1"
    },
    {
      "label": "Command 3",
      "options": [ "enum 1", "enum 2", "enum 3", "enum 4" ],
      "defaultValue": "enum 4"
    },
    {
      "label": "Command 4",
      "options": [ "enum 1", "enum 2", "enum 3", "enum 4" ],
      "defaultValue": "enum 3"
    },
    {
      "label": "Command 5",
      "options": [ "enum 1", "enum 2", "enum 3", "enum 4" ],
      "defaultValue": "enum 1"
    }
  ],
  "status": [
    {
      "label": "Status 1",
      "defaultValue": "Initial Status 1"
    },
    {
      "label": "Status 2",
      "defaultValue": "Initial Status 2"
    },
    {
      "label": "Status 3",
      "defaultValue": "Initial Status 3"
    },
    {
      "label": "Status 4",
      "defaultValue": "Initial Status 4"
    }
  ]
}


# CanBusApp.csproj.nuget.dgspec.json
{
  "format": 1,
  "restore": {
    "C:\\dev\\projects\\CANSim\\CanBusApp\\CanBusApp\\CanBusApp.csproj": {}
  },
  "projects": {
    "C:\\dev\\projects\\CANSim\\CanBusApp\\CanBusApp\\CanBusApp.csproj": {
      "version": "1.0.0",
      "restore": {
        "projectUniqueName": "C:\\dev\\projects\\CANSim\\CanBusApp\\CanBusApp\\CanBusApp.csproj",
        "projectName": "CanBusApp",
        "projectPath": "C:\\dev\\projects\\CANSim\\CanBusApp\\CanBusApp\\CanBusApp.csproj",
        "packagesPath": "C:\\Users\\User\\.nuget\\packages\\",
        "outputPath": "C:\\dev\\projects\\CANSim\\CanBusApp\\CanBusApp\\obj\\",
        "projectStyle": "PackageReference",
        "fallbackFolders": [
          "C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\NuGetPackages"
        ],
        "configFilePaths": [
          "C:\\Users\\User\\AppData\\Roaming\\NuGet\\NuGet.Config",
          "C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.FallbackLocation.config",
          "C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.Offline.config"
        ],
        "originalTargetFrameworks": [
          "net8.0-windows"
        ],
        "sources": {
          "C:\\Program Files (x86)\\Microsoft SDKs\\NuGetPackages\\": {},
          "https://api.nuget.org/v3/index.json": {}
        },
        "frameworks": {
          "net8.0-windows7.0": {
            "targetAlias": "net8.0-windows",
            "projectReferences": {}
          }
        },
        "warningProperties": {
          "warnAsError": [
            "NU1605"
          ]
        },
        "restoreAuditProperties": {
          "enableAudit": "true",
          "auditLevel": "low",
          "auditMode": "direct"
        }
      },
      "frameworks": {
        "net8.0-windows7.0": {
          "targetAlias": "net8.0-windows",
          "dependencies": {
            "Newtonsoft.Json": {
              "target": "Package",
              "version": "[13.0.3, )"
            }
          },
          "imports": [
            "net461",
            "net462",
            "net47",
            "net471",
            "net472",
            "net48",
            "net481"
          ],
          "assetTargetFallback": true,
          "warn": true,
          "frameworkReferences": {
            "Microsoft.NETCore.App": {
              "privateAssets": "all"
            },
            "Microsoft.WindowsDesktop.App.WindowsForms": {
              "privateAssets": "none"
            }
          },
          "runtimeIdentifierGraphPath": "C:\\Program Files\\dotnet\\sdk\\8.0.300/PortableRuntimeIdentifierGraph.json"
        }
      }
    }
  }
}

# project.assets.json
{
  "version": 3,
  "targets": {
    "net8.0-windows7.0": {
      "Newtonsoft.Json/13.0.3": {
        "type": "package",
        "compile": {
          "lib/net6.0/Newtonsoft.Json.dll": {
            "related": ".xml"
          }
        },
        "runtime": {
          "lib/net6.0/Newtonsoft.Json.dll": {
            "related": ".xml"
          }
        }
      }
    }
  },
  "libraries": {
    "Newtonsoft.Json/13.0.3": {
      "sha512": "HrC5BXdl00IP9zeV+0Z848QWPAoCr9P3bDEZguI+gkLcBKAOxix/tLEAAHC+UvDNPv4a2d18lOReHMOagPa+zQ==",
      "type": "package",
      "path": "newtonsoft.json/13.0.3",
      "files": [
        ".nupkg.metadata",
        ".signature.p7s",
        "LICENSE.md",
        "README.md",
        "lib/net20/Newtonsoft.Json.dll",
        "lib/net20/Newtonsoft.Json.xml",
        "lib/net35/Newtonsoft.Json.dll",
        "lib/net35/Newtonsoft.Json.xml",
        "lib/net40/Newtonsoft.Json.dll",
        "lib/net40/Newtonsoft.Json.xml",
        "lib/net45/Newtonsoft.Json.dll",
        "lib/net45/Newtonsoft.Json.xml",
        "lib/net6.0/Newtonsoft.Json.dll",
        "lib/net6.0/Newtonsoft.Json.xml",
        "lib/netstandard1.0/Newtonsoft.Json.dll",
        "lib/netstandard1.0/Newtonsoft.Json.xml",
        "lib/netstandard1.3/Newtonsoft.Json.dll",
        "lib/netstandard1.3/Newtonsoft.Json.xml",
        "lib/netstandard2.0/Newtonsoft.Json.dll",
        "lib/netstandard2.0/Newtonsoft.Json.xml",
        "newtonsoft.json.13.0.3.nupkg.sha512",
        "newtonsoft.json.nuspec",
        "packageIcon.png"
      ]
    }
  },
  "projectFileDependencyGroups": {
    "net8.0-windows7.0": [
      "Newtonsoft.Json >= 13.0.3"
    ]
  },
  "packageFolders": {
    "C:\\Users\\User\\.nuget\\packages\\": {},
    "C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\NuGetPackages": {}
  },
  "project": {
    "version": "1.0.0",
    "restore": {
      "projectUniqueName": "C:\\dev\\projects\\CANSim\\CanBusApp\\CanBusApp\\CanBusApp.csproj",
      "projectName": "CanBusApp",
      "projectPath": "C:\\dev\\projects\\CANSim\\CanBusApp\\CanBusApp\\CanBusApp.csproj",
      "packagesPath": "C:\\Users\\User\\.nuget\\packages\\",
      "outputPath": "C:\\dev\\projects\\CANSim\\CanBusApp\\CanBusApp\\obj\\",
      "projectStyle": "PackageReference",
      "fallbackFolders": [
        "C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\NuGetPackages"
      ],
      "configFilePaths": [
        "C:\\Users\\User\\AppData\\Roaming\\NuGet\\NuGet.Config",
        "C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.FallbackLocation.config",
        "C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.Offline.config"
      ],
      "originalTargetFrameworks": [
        "net8.0-windows"
      ],
      "sources": {
        "C:\\Program Files (x86)\\Microsoft SDKs\\NuGetPackages\\": {},
        "https://api.nuget.org/v3/index.json": {}
      },
      "frameworks": {
        "net8.0-windows7.0": {
          "targetAlias": "net8.0-windows",
          "projectReferences": {}
        }
      },
      "warningProperties": {
        "warnAsError": [
          "NU1605"
        ]
      },
      "restoreAuditProperties": {
        "enableAudit": "true",
        "auditLevel": "low",
        "auditMode": "direct"
      }
    },
    "frameworks": {
      "net8.0-windows7.0": {
        "targetAlias": "net8.0-windows",
        "dependencies": {
          "Newtonsoft.Json": {
            "target": "Package",
            "version": "[13.0.3, )"
          }
        },
        "imports": [
          "net461",
          "net462",
          "net47",
          "net471",
          "net472",
          "net48",
          "net481"
        ],
        "assetTargetFallback": true,
        "warn": true,
        "frameworkReferences": {
          "Microsoft.NETCore.App": {
            "privateAssets": "all"
          },
          "Microsoft.WindowsDesktop.App.WindowsForms": {
            "privateAssets": "none"
          }
        },
        "runtimeIdentifierGraphPath": "C:\\Program Files\\dotnet\\sdk\\8.0.300/PortableRuntimeIdentifierGraph.json"
      }
    }
  }
}

# .NETCoreApp,Version=v8.0.AssemblyAttributes.cs
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]


# CanBusApp.AssemblyInfo.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("CanBusApp")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+b49c6c9052e2f6d08e74b554d2ff12b0d9ab9c95")]
[assembly: System.Reflection.AssemblyProductAttribute("CanBusApp")]
[assembly: System.Reflection.AssemblyTitleAttribute("CanBusApp")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
[assembly: System.Runtime.Versioning.TargetPlatformAttribute("Windows7.0")]
[assembly: System.Runtime.Versioning.SupportedOSPlatformAttribute("Windows7.0")]

// Generated by the MSBuild WriteCodeFragment class.



# CanBusApp.designer.deps.json
{
  "runtimeTarget": {
    "name": ".NETCoreApp,Version=v8.0",
    "signature": ""
  },
  "compilationOptions": {},
  "targets": {
    ".NETCoreApp,Version=v8.0": {
      "Newtonsoft.Json/13.0.3": {
        "runtime": {
          "lib/net6.0/Newtonsoft.Json.dll": {
            "assemblyVersion": "13.0.0.0",
            "fileVersion": "13.0.3.27908"
          }
        }
      }
    }
  },
  "libraries": {
    "Newtonsoft.Json/13.0.3": {
      "type": "package",
      "serviceable": true,
      "sha512": "sha512-HrC5BXdl00IP9zeV+0Z848QWPAoCr9P3bDEZguI+gkLcBKAOxix/tLEAAHC+UvDNPv4a2d18lOReHMOagPa+zQ==",
      "path": "newtonsoft.json/13.0.3",
      "hashPath": "newtonsoft.json.13.0.3.nupkg.sha512"
    }
  }
}

# CanBusApp.designer.runtimeconfig.json
{
  "runtimeOptions": {
    "tfm": "net8.0",
    "frameworks": [
      {
        "name": "Microsoft.NETCore.App",
        "version": "8.0.0"
      },
      {
        "name": "Microsoft.WindowsDesktop.App",
        "version": "8.0.0"
      }
    ],
    "additionalProbingPaths": [
      "C:\\Users\\User\\.dotnet\\store\\|arch|\\|tfm|",
      "C:\\Users\\User\\.nuget\\packages",
      "C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\NuGetPackages"
    ],
    "configProperties": {
      "System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization": true,
      "Microsoft.NETCore.DotNetHostPolicy.SetAppPaths": true
    }
  }
}

# CanBusApp.GlobalUsings.g.cs
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.Drawing;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;
global using global::System.Windows.Forms;


# CanBusApp.sourcelink.json
{"documents":{"C:\\dev\\projects\\CANSim\\CanBusApp\\*":"https://raw.githubusercontent.com/DebugDuckling/CanBusApp/b49c6c9052e2f6d08e74b554d2ff12b0d9ab9c95/*"}}

# .NETCoreApp,Version=v8.0.AssemblyAttributes.cs
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]


# CanBusApp.AssemblyInfo.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("CanBusApp")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Release")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+b49c6c9052e2f6d08e74b554d2ff12b0d9ab9c95")]
[assembly: System.Reflection.AssemblyProductAttribute("CanBusApp")]
[assembly: System.Reflection.AssemblyTitleAttribute("CanBusApp")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
[assembly: System.Runtime.Versioning.TargetPlatformAttribute("Windows7.0")]
[assembly: System.Runtime.Versioning.SupportedOSPlatformAttribute("Windows7.0")]

// Generated by the MSBuild WriteCodeFragment class.



# CanBusApp.GlobalUsings.g.cs
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.Drawing;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;
global using global::System.Windows.Forms;


